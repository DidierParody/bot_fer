from google import genai
import requests
import schedule
import time
import threading
import os
from flask import Flask
from datetime import datetime
import random

# === CONFIGURACI√ìN DEL BOT ===
TOKEN = "8269117040:AAEme6PT8QprX_hW4leq2CTkn4EHtHqZ1d4"
CHAT_ID = "5817440886"  # üíó Chat ID de Fernanda
PING_URL = "https://bot-fer.onrender.com"  # ‚ö†Ô∏è URL p√∫blica de tu app en Render

# === CONFIGURACI√ìN DE GEMINI ===
client = genai.Client(api_key="AIzaSyA1DR-hsQHYeY7ixUY3fJxJH_6Mt5yDWe0")

# === LISTAS DE VARIACIONES PARA CREATIVIDAD ===
estilos = [
    "Haz que suene como una carta escrita con el coraz√≥n.",
    "Dale un toque po√©tico y esperanzador, como un rayo de sol tras la lluvia.",
    "Insp√≠rate en una tarde tranquila con olor a chocolate.",
    "Haz que parezca un pensamiento dulce que llega de repente.",
    "Escr√≠belo como si fuera un susurro lleno de ternura.",
    "Usa met√°foras suaves que evoquen calma y cari√±o."
]

intenciones = [
    "enf√≥cate en transmitir esperanza y serenidad",
    "hazla sentir amada y orgullosa de s√≠ misma",
    "insp√≠rala a creer en su luz interior con dulzura y amor",
    "hazla sonre√≠r como si recibiera un abrazo de oso de peluche",
    "haz que la frase evoque confianza y ternura",
    "hazla sentirse acompa√±ada incluso en los momentos dif√≠ciles"
]

# === FUNCI√ìN PARA GENERAR LA FRASE ===
def generar_frase():
    hoy = datetime.now().strftime("%A %d de %B %Y")

    prompt = f"""
    Hoy es {hoy}. 
    Mar√≠a Fernanda es mi pareja, tiene 19 a√±os y estudia educaci√≥n infantil.
    Ama los colores azul y negro, los peluches, las caricaturas para ni√±os peque√±os y el chocolate.
    Tiene una energ√≠a nost√°lgica pero muy tierna. Es sensible, dulce y cari√±osa,
    aunque a veces duda de s√≠ misma y a√∫n siente el dolor de haber perdido a su mam√°.
    Quiero que le env√≠es una frase motivacional del d√≠a que la llene de vida y esperanza,
    que le recuerde lo valiosa que es y le haga sentir acompa√±ada, amada y con fuerzas para seguir sonriendo.
    Usa un tono c√°lido, tierno y levemente rom√°ntico, con emojis suaves y delicados (üå∑üíôüêª‚ú®üç´),
    y si puedes, menci√≥nala cari√±osamente como 'mi reina' dentro de la frase.
    {random.choice(estilos)}
    Adem√°s, {random.choice(intenciones)}.
    No menciones que eres una IA, ni des explicaciones, ni escribas m√°s texto del necesario;
    solo devuelve la frase final, lista para enviarle.
    """

    # ‚úÖ Ajuste a la nueva versi√≥n del cliente GenAI
    response = client.models.generate_content(
        model="gemini-2.5-flash",
        contents=prompt,
        temperature=0.95,
        top_p=0.9,
        top_k=40,
        max_output_tokens=150,
    )

    return response.text.strip()

# === FUNCI√ìN PARA ENVIAR EL MENSAJE ===
def enviar_mensaje():
    MENSAJE = generar_frase()

    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": MENSAJE}

    response = requests.post(url, data=data)
    if response.status_code == 200:
        print("‚úÖ Mensaje enviado correctamente")
        print(MENSAJE)
    else:
        print("‚ùå Error al enviar mensaje:", response.text)

# === FUNCI√ìN AUTO-PING PARA MANTENER EL BOT DESPIERTO ===
def auto_ping():
    while True:
        try:
            res = requests.get(PING_URL)
            print(f"üîÅ Auto-ping ejecutado: {res.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error en auto-ping: {e}")
        time.sleep(600)  # cada 10 minutos

# === PROGRAMAR ENV√çO DIARIO ===
schedule.every(24).hours.do(enviar_mensaje)

# Enviar primer mensaje al iniciar
enviar_mensaje()

# === SERVIDOR FLASK PARA MANTENERLO ACTIVO EN RENDER ===
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot activo üíô", 200

if __name__ == "__main__":
    # Iniciar auto-ping en segundo plano
    threading.Thread(target=auto_ping, daemon=True).start()
    
    print("ü§ñ Bot iniciado... enviando mensajes cada 24 horas y auto-ping activo.")
    
    # Iniciar Flask
    threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000))),
        daemon=True
    ).start()

    # Bucle principal
    while True:
        schedule.run_pending()
        time.sleep(60)
